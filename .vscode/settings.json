{
  "i18n-ally.localesPaths": [
    "frontend/src/i18n"
  ],
  "i18n-ally.sourceLanguage": "ja",
  "i18n-ally.keystyle": "nested",
  "i18n-ally.extract.autoDetect": true,
  "i18n-ally.extract.ignored": [
    " {\n          showChart(\"ip\");\n        }}\n      >\n        ",
    "TWSNMP Logo",
    "\n      TWSNMP FK - {mapName}\n    ",
    " {\n        page = \"map\";\n      }}\n    >\n      ",
    " {\n        page = \"node\";\n      }}\n    >\n      ",
    " {\n        page = \"polling\";\n      }}\n    >\n      ",
    " {\n        page = \"eventlog\";\n      }}\n    >\n      ",
    " {\n        page = \"syslog\";\n      }}\n    >\n      ",
    " {\n        page = \"trap\";\n      }}\n    >\n      ",
    " {\n        page = \"arp\";\n      }}\n    >\n      ",
    " {\n        page = \"ai\";\n      }}\n    >\n      ",
    " {\n        showConfig = true;\n      }}\n    >\n      ",
    "Level",
    "Time",
    "Type",
    "Event",
    "Name",
    "Mode",
    "Descr",
    "<span class=\"mdi ",
    " text-xl\" style=\"color:",
    ";\"></span><span class=\"ml-2\">",
    "Score",
    "Node",
    "Polling",
    "Count",
    "<span class=\"text-yellow-500\">${ip}</span>",
    "<span class=\"text-red-500\">${ip}</span>",
    "<span class=\"text-red-600\">${mac}</span>",
    "<span class=\"text-red-600\">${mac}</span>",
    "Vendor",
    "State",
    "Change",
    "Change",
    " {\n        showReport = true;\n      }}\n      size=\"xs\"\n    >\n      ",
    "\n      Excel\n    ",
    " {\n          showChart(\"ip3D\");\n        }}\n      >\n        ",
    " {\n          showChart(\"graphForce\");\n        }}\n      >\n        ",
    " {\n          showChart(\"graphCircular\");\n        }}\n      >\n        ",
    "SNMP Community",
    "snmp user",
    "Syslog",
    "SNMP TRAP",
    "ARP Watch",
    "smtp user",
    "\n    {#if drawItem.Type ",
    "< 2}\n      ",
    " {\n          selectedNode = \"\";\n          showEditNode = true;\n          showMapMenu = false;\n        }}\n      >\n        ",
    " {\n          selectedDrawItem = \"\";\n          showEditDrawItem = true;\n          showMapMenu = false;\n        }}\n      >\n        ",
    " {\n          showMapMenu = false;\n          CheckPolling(\"\");\n        }}\n      >\n        ",
    " {\n          showMapMenu = false;\n          showDiscover = true;\n        }}\n      >\n        ",
    " {\n          showMapMenu = false;\n          showGrid = true;\n        }}\n      >\n        ",
    " {\n          resetMap();\n          count = 1;\n          showMapMenu = false;\n        }}\n      >\n        ",
    " {\n          showNodeMenu = false;\n          showNodeReport = true;\n        }}\n      >\n        ",
    " {\n          showNodeMenu = false;\n          showPing = true;\n        }}\n      >\n        ",
    " {\n          showNodeMenu = false;\n          showMibBr = true;\n        }}\n      >\n        ",
    " {\n          showNodeMenu = false;\n          WakeOnLan(selectedNode);\n        }}\n      >\n        ",
    " {\n          showNodeMenu = false;\n          showEditNode = true;\n        }}\n      >\n        ",
    " {\n          showNodeMenu = false;\n          showPolling = true;\n        }}\n      >\n        ",
    " {\n          showNodeMenu = false;\n          CheckPolling(selectedNode);\n        }}\n      >\n        ",
    " {\n          showNodeMenu = false;\n          await CopyNode(selectedNode);\n          count = 1;\n        }}\n      >\n        ",
    " {\n          deleteNodes([selectedNode]);\n        }}\n      >\n        ",
    " {\n              showNodeMenu = false;\n              BrowserOpenURL(url);\n            }}\n          >\n            ",
    " {\n          showDrawItemMenu = false;\n          showEditDrawItem = true;\n        }}\n      >\n        ",
    " {\n          showDrawItemMenu = false;\n          await CopyDrawItem(selectedDrawItem);\n          count = 1;\n        }}\n      >\n        ",
    " {\n          showDrawItemMenu = false;\n          await CopyDrawItem(selectedDrawItem);\n          count = 1;\n        }}\n      >\n        ",
    " {\n          showGrid = false;\n          grid(gridSize, false);\n        }}\n        size=\"sm\"\n      >\n        ",
    " {\n          showGrid = false;\n          grid(gridSize, true);\n        }}\n        size=\"sm\"\n      >\n        ",
    " {\n          showGrid = false;\n        }}\n        size=\"sm\"\n      >\n        ",
    " {\n    showMapMenu = false;\n    showNodeMenu = false;\n    showDrawItemMenu = false;\n  }}\n/>\n",
    "\n        Wake On Lan\n      ",
    " {\n          deleteDrawItems([selectedDrawItem]);\n        }}\n      >\n        ",
    "Index",
    "Value",
    "Table",
    "Table",
    "TWSNMP MIB(",
    ")",
    " {\n          showMIBTree = true;\n        }}\n      >\n        ",
    " {\n          name = selected;\n        }}\n      />\n    ",
    " {\n              exportMIB(\"csv\");\n            }}\n            size=\"sm\"\n          >\n            ",
    " {\n              exportMIB(\"excel\");\n            }}\n            size=\"sm\"\n          >\n            ",
    "\n            Excel\n          ",
    " {\n        name = e.detail;\n        showMIBTree = false;\n      }}\n    />\n    ",
    " {\n          showMIBTree = false;\n        }}\n        size=\"sm\"\n      >\n        ",
    "Speed",
    "Running",
    "Runnable",
    "Testing",
    "Invalid",
    "Down",
    "<span class=\"text-blue-700\">",
    "<span class=\"text-blue-900\">",
    "<span class=\"text-red-800\">",
    "<span class=\"text-blue-700\">${r.toFixed(2)}</span>",
    "<span class=\"text-yellow-700\">${r.toFixed(2)}</span>",
    "<span class=\"text-red-700\">${r.toFixed(2)}</span>",
    "Yes",
    "No",
    "Read Only",
    "Key",
    "Size",
    "Used",
    "Rate",
    "Unit",
    "Status",
    "Errors",
    "Mount",
    "Remote",
    "Access",
    "Bootable",
    "Path",
    "Param",
    "Mem",
    "%",
    "(",
    "Bytes",
    "I/F Status",
    "Traffic",
    "SNMP restart",
    "System date",
    "diff < 1",
    "Process count",
    "CPU Usage",
    "avg < 95.0",
    "\n      s = hrStorageSize;\n      u = hrStorageUsed;\n      rate = s ? (100.0*u)/s : 0.0;\n      setResult(\"rate\",rate);\n      rate < 95.0\n    ",
    " proccess count",
    " process count",
    " {\n          showHrSystem();\n        }}\n      >\n        ",
    "\n            File System\n          ",
    "\n      {/if}\n      {#if selectedHrSystemCount > 0 ",
    "& canWacthHrSystem()}\n        ",
    "Usage",
    "&",
    "&",
    "Timeout",
    "Stat",
    "Loc",
    "\n      {#if !wait ",
    "& results.length > 0}\n        {#if canShowHistogram}\n          ",
    "& results.length > 0}\n        {#if canShowHistogram}\n          ",
    "Params",
    "Filter",
    "Result",
    "=",
    "\n        {#if polling.LogMode == 3 ",
    "& aiResult}\n          ",
    "Host",
    "Tag",
    "Message",
    "count < 1",
    "Variables",
    " {\n          showFilter= false;\n          refresh();\n        }}\n        size=\"xs\"\n      >\n        ",
    " {\n          showFilter = false;\n        }}\n        size=\"xs\"\n      >\n        ",
    " (showFilter = true)}\n      size=\"xs\"\n    >\n      ",
    " {\n          showFilter = false;\n          refresh();\n        }}\n        size=\"xs\"\n      >\n        ",
    "\n        TWSNMP FK\n      ",
    " {\n      showReport = true;\n    }}\n      size=\"xs\"\n      >\n      ",
    " {\n          showGrid = false;\n          grid(gridSize, false);\n        }}\n        size=\"xs\"\n      >\n        ",
    " {\n          showGrid = false;\n          grid(gridSize, true);\n        }}\n        size=\"xs\"\n      >\n        ",
    " {\n          showGrid = false;\n        }}\n        size=\"xs\"\n      >\n        ",
    "\n          Wake On Lan\n        ",
    "Wake On Lan",
    " {\n        page = \"system\";\n      }}\n    >\n      ",
    "\n      System\n    ",
    " {\n          showChart(\"from\");\n        }}\n      >\n        ",
    " {\n          showChart(\"heatmap\");\n        }}\n      >\n        ",
    " {\n          showChart(\"trap3D\");\n        }}\n      >\n        ",
    " {\n          showChart(\"type\");\n        }}\n      >\n        ",
    "Disk",
    "Load",
    "Net",
    "Conn",
    "Proc",
    "DBSize",
    " {\n    showForecast = false;\n  }}\n  size=\"xs\"\n>\n  ",
    " {\n        showForecast = false;\n      }}\n      size=\"xs\"\n    >\n      ",
    " {\n              exportMIB(\"csv\");\n            }}\n            size=\"xs\"\n          >\n            ",
    " {\n              exportMIB(\"excel\");\n            }}\n            size=\"xs\"\n          >\n            ",
    " {\n          showMIBTree = false;\n        }}\n        size=\"xs\"\n      >\n        ",
    " showMIBTree = true}\n          size=\"xs\"\n        >\n          ",
    " {\n            dispatch(\"select\", name);\n          }}\n        >\n          {name}({oid}{type})\n        ",
    " {\n            dispatch(\"select\", name);\n          }}\n        >\n          {name}({oid}{type})\n        ",
    "\n    {#if children ",
    "& children.length > 0}\n      ",
    "*",
    "File",
    "Error",
    " {\n          DeleteArpEnt(selectedIP);\n          refresh();\n        }}\n        size=\"xs\"\n      >\n        ",
    "Last",
    " (showNodeReport = true)}\n        size=\"xs\"\n      >\n        ",
    " (showEditNode = true)}\n        size=\"xs\"\n      >\n        ",
    "\n    {/if}\n\n    {#if selectedIP ",
    " {\n          showAddNode = true;\n        }}\n        size=\"xs\"\n      >\n        ",
    "& !selectedNodeID}\n      ",
    "{",
    " (showMIBTree = true)}\n          size=\"xs\"\n        >\n          ",
    "\n    <div class=\"icon\" style=\"height: ${divSize}px;width: ${divSize}px;background-color: ${color}; color: white;font-size: ${\n      locConf.IconSize\n    }px;text-align: center;line-height: ${divSize}px;\">\n\t\t\t<span class=\"mdi ${icon}\"></span>\n\t\t</div>\n\t\t<div style=\"font-size: ${locConf.IconSize / 2}px;text-align: center;\">${\n      n.Name\n    }</div>",
    " {\n          showAddNode = false;\n        }}\n        size=\"xs\"\n      >\n        ",
    " {\n          page = \"map\";\n        }}\n      >\n        ",
    " {\n            page = \"loc\";\n          }}\n        >\n          ",
    " {\n            page = \"loc\";\n          }}\n        >\n          ",
    " {\n          page = \"node\";\n        }}\n      >\n        ",
    " {\n          page = \"polling\";\n        }}\n      >\n        ",
    " {\n          page = \"address\";\n        }}\n      >\n        ",
    " {\n          page = \"eventlog\";\n        }}\n      >\n        ",
    " {\n          page = \"syslog\";\n        }}\n      >\n        ",
    " {\n          page = \"trap\";\n        }}\n      >\n        ",
    " {\n          page = \"arp\";\n        }}\n      >\n        ",
    " {\n          page = \"ai\";\n        }}\n      >\n        ",
    " {\n          page = \"system\";\n        }}\n      >\n        ",
    " {\n          oldPage = page;\n          page = \"\";\n          showConfig = true;\n        }}\n      >\n        ",
    "Icon",
    "<span class=\"mdi ${i} text-2xl\"></span>",
    "Code",
    " deleteBeep(true)}\n              size=\"xs\"\n            >\n              ",
    " selectBeep(true)}\n              size=\"xs\"\n            >\n              ",
    " deleteBeep(false)}\n              size=\"xs\"\n            >\n              ",
    " selectBeep(false)}\n              size=\"xs\"\n            >\n              ",
    " {\n          showEditIcon = false;\n        }}\n        size=\"xs\"\n      >\n        ",
    " {\n          showMapMenu = false;\n          CheckPolling(\"all\");\n          refreshMap();\n        }}\n      >\n        ",
    " {\n          showMapMenu = false;\n          CheckPolling(\"all\");\n          refreshMap();\n        }}\n      >\n        ",
    " {\n          showMapMenu = false;\n          resetMap();\n          refreshMap();\n        }}\n      >\n        ",
    " {\n          showNodeMenu = false;\n          CheckPolling(selectedNode);\n          refreshMap();\n        }}\n      >\n        ",
    " {\n          showNodeMenu = false;\n          await CopyNode(selectedNode);\n          refreshMap();\n        }}\n      >\n        ",
    " {\n          deleteNodes([selectedNode]);\n          refreshMap();\n        }}\n      >\n        ",
    " {\n          showDrawItemMenu = false;\n          await CopyDrawItem(selectedDrawItem);\n          refreshMap();\n        }}\n      >\n        ",
    " {\n          deleteDrawItems([selectedDrawItem]);\n          refreshMap();\n        }}\n      >\n        ",
    " {\n          deleteDrawItems([selectedDrawItem]);\n          refreshMap();\n        }}\n      >\n        ",
    " {\n          showReport = true;\n        }}\n        size=\"xs\"\n      >\n        ",
    "\n        Excel\n      ",
    " {\n          showChart(\"state\");\n        }}\n      >\n        ",
    " {\n          showChart(\"node\");\n        }}\n      >\n        ",
    " {\n          showChart(\"oprate\");\n        }}\n      >\n        ",
    " {\n          showChart(\"arpwatch\");\n        }}\n      >\n        ",
    " {\n          showChart(\"arpwatch\");\n        }}\n      >\n        ",
    " {\n        BrowserOpenURL(`https://lhx98.linkclub.jp/twise.co.jp/download/twsnmpfk_${lang}.pdf`);\n      }}>\n      ",
    " {\n            BrowserOpenURL(`https://lhx98.linkclub.jp/twise.co.jp/download/twsnmpfk_${lang}.pdf`);\n          }}\n        >\n          ",
    " {\n        BrowserOpenURL(`https://lhx98.linkclub.jp/twise.co.jp/download/twsnmpfk_${lang}.pdf`);\n      }}\n    >\n      ",
    " {\n        BrowserOpenURL(\n          `https://lhx98.linkclub.jp/twise.co.jp/download/twsnmpfk_${lang}.pdf`\n        );\n      }}\n    >\n      ",
    " {\n        oldPage = page;\n        page = \"\";\n        showHelp = true;\n      }}\n    >\n      ",
    " {\n          BrowserOpenURL(\n            `https://lhx98.linkclub.jp/twise.co.jp/download/twsnmpfk_${lang}.pdf`\n          );\n        }}\n      >\n        ",
    " {\n          showHelp = true;\n        }}\n      >\n        ",
    " {\n              helpPage = \"mapconf\";\n            }}\n          >\n            ",
    " {\n              helpPage = \"notifyconf\";\n            }}\n          >\n            ",
    " {\n              helpPage = \"aiconf\";\n            }}\n          >\n            ",
    " {\n              helpPage = \"locconf\";\n            }}\n          >\n            ",
    " {\n            helpPage = \"iconconf\";\n          }}\n        >\n          ",
    " {\n            helpPage = \"mibconf\";\n          }}\n        >\n          ",
    " {\n        showHelp = true;\n      }}\n    >\n      ",
    " {\n              showHelp = true;\n            }}\n          >\n            ",
    " {\n        reveal.toggleOverview();\n      }}\n    >\n      ",
    "<table id=\"mibTable\" class=\"display compact\" style=\"width:99%\" />",
    " {\n          name = e.detail;\n          showMIBTree = false;\n        }}\n      />\n    ",
    " zoom(true)}\n>\n  ",
    " zoom(false)}\n>\n  ",
    " {\n    refreshMap();\n  }}\n/>\n\n",
    " {\n    showEditNode = false;\n    refreshMap();\n  }}\n/>\n\n",
    " {\n    showEditLine = false;\n    refreshMap();\n  }}\n/>\n\n",
    " {\n    showEditDrawItem = false;\n    refreshMap();\n  }}\n/>\n\n",
    " {\n    showNodeReport = false;\n  }}\n/>\n\n",
    " {\n    showPolling = false;\n    refreshMap();\n  }}\n/>\n\n",
    " {\n    showPolling = false;\n    refreshMap();\n  }}\n/>\n\n",
    " {\n    page = oldPage;\n    updateMapName();\n  }}\n/>\n\n",
    " {\n            showHelp = true;\n          }}\n        >\n          ",
    " {\n              helpPage = \"mibconf\";\n              showHelp = true;\n            }}\n          >\n            ",
    " (showMIBTree = true)}\n            size=\"xs\"\n          >\n            ",
    " {\n              helpPage = \"iconconf\";\n              showHelp = true;\n            }}\n          >\n            ",
    " {\n                helpPage = \"locconf\";\n                showHelp = true;\n              }}\n            >\n              ",
    " {\n                helpPage = \"aiconf\";\n                showHelp = true;\n              }}\n            >\n              ",
    " {\n                helpPage = \"notifyconf\";\n                showHelp = true;\n              }}\n            >\n              ",
    " selectBeep(false)}\n                size=\"xs\"\n              >\n                ",
    " deleteBeep(false)}\n                size=\"xs\"\n              >\n                ",
    " selectBeep(true)}\n                size=\"xs\"\n              >\n                ",
    " deleteBeep(true)}\n                size=\"xs\"\n              >\n                ",
    " {\n                helpPage = \"mapconf\";\n                showHelp = true;\n              }}\n            >\n              ",
    " {\n                helpPage = \"mapconf\";\n                showHelp = true;\n              }}\n            >\n              ",
    " {\n    refresh();\n  }}\n/>\n\n",
    " {\n    refresh();\n  }}\n/>\n\n",
    "Action",
    " {\n    refresh();\n  }}\n/>\n",
    " {\n          backImage = await GetBackImage();\n          showMapMenu = false;\n          showEditBackImage = true;\n        }}\n      >\n        ",
    " text-sm\" style=\"color:",
    " text-sm\" style=\"color:",
    "\n      {#if drawItem.Type ",
    "< 2}\n        ",
    "< 2}\n        ",
    "\n        {/if}\n        {#if selectedHrSystemCount > 0 ",
    "& canWacthHrSystem()}\n          ",
    "& canWacthHrSystem()}\n          ",
    " {\n            chart = undefined;\n          }}\n        >\n          ",
    "\n          {#if polling.LogMode == 3 ",
    "& aiResult}\n            ",
    "& aiResult}\n            ",
    " {\n            filter.Start = \"\";\n            filter.End = \"\";\n          }}\n        >\n          ",
    " {\n          showEditBackImage = false;\n        }}\n        size=\"xs\"\n      >\n        ",
    " {\n        showFeedback = true;\n      }}\n    >\n      ",
    " {\n          showFeedback = false;\n        }}\n      >\n        ",
    "\n          {#if drawItem.Type ",
    "\n          {#if drawItem.Type ",
    "< 6}\n            ",
    " showSSHPublicKey = true}\n              size=\"xs\"\n            >\n              ",
    "SSH Sever",
    " {\n          showSSHPublicKey = false;\n        }}\n        size=\"xs\"\n      >\n        ",
    " {\n    resizeLogLevelChart();\n    resizeLogCountChart();\n}} />\n\n",
    "\n      {/if}\n      Copy\n    ",
    "<table id=\"magicTable\" class=\"display compact\" style=\"width:99%\" />",
    "\n            {/if}\n            Copy\n          ",
    " {\n            exportMagic(\"csv\");\n          }}\n          size=\"xs\"\n        >\n          ",
    " {\n            exportMagic(\"excel\");\n          }}\n          size=\"xs\"\n        >\n          ",
    " (showMagic = false)}\n        size=\"xs\"\n      >\n        ",
    "\n          Excel\n        ",
    "\n          Excel\n        ",
    "\n          {/if}\n          Copy\n        ",
    "\n        {/if}\n        Copy\n      ",
    "SNMP get ",
    "\n        {/if}\n        {#if selectedCount == 1 ",
    "\n        {/if}\n        {#if selectedCount == 1 ",
    "& !isTable}\n          ",
    " (showSSHPublicKey = true)}\n              size=\"xs\"\n            >\n              ",
    " {\n          showMapMenu = false;\n          ImportV4Map();\n          refreshMap();\n        }}\n      >\n        ",
    "Protocol",
    "TCPFlags",
    "Packets",
    "Dur",
    "Total",
    " {\n          showHeatmap();\n        }}\n      >\n        ",
    " {\n          showHistogram();\n        }}\n      >\n        ",
    " {\n          showTraffic();\n        }}\n      >\n        ",
    " {\n          showTopList();\n        }}\n      >\n        ",
    " {\n          showTopList3D();\n        }}\n      >\n        ",
    " {\n          showFlow();\n        }}\n      >\n        ",
    " {\n          showFFT();\n        }}\n      >\n        ",
    " {\n          showFFT3D();\n        }}\n      >\n        ",
    " {\n            showTopList();\n          }}\n        />\n        ",
    " {\n            showTopList3D();\n          }}\n        />\n        ",
    " {\n            updateFFT();\n          }}\n        />\n        ",
    " {\n          showMap();\n        }}\n      >\n        ",
    " {\n            showFlow();\n          }}\n        />\n        ",
    "Only Src<br/>",
    "Only Dst<br/>",
    "Source",
    "Target",
    " {\n          showFormatNodesMenu = false;\n          horizontal(selectedNodes);\n          selectedNodes = [];\n        }}\n      >\n        ",
    " {\n          showFormatNodesMenu = false;\n          vertical(selectedNodes);\n          selectedNodes = [];\n        }}\n      >\n        ",
    " {\n          showFormatNodesMenu = false;\n          circle(selectedNodes);\n          selectedNodes = [];\n        }}\n      >\n        ",
    " {\n    showMapMenu = false;\n    showNodeMenu = false;\n    showDrawItemMenu = false;\n    showFormatNodesMenu = false;\n  }}\n/>\n",
    " {\n          name = e.detail;\n          showResultMIBTree = false;\n          get();\n        }}\n      />\n    ",
    " {\n          showResultMIBTree = false;\n        }}\n        size=\"xs\"\n      >\n        ",
    " {\n              if (!resultMibTree || resultMibTree.length == 0) {\n                updateResultMibTree();\n              }\n              showResultMIBTree = true;\n            }}\n            size=\"xs\"\n          >\n            ",
    "\n            MIB Tree\n          ",
    " {\n              showResultMIBTree = true;\n              if (!resultMibTree || resultMibTree.length == 0) {\n                updateResultMibTree();\n              }\n            }}\n            size=\"xs\"\n          >\n            ",
    " {\n          stopResultMibTree = true;\n        }}\n        size=\"xs\"\n      >\n        ",
    " {\n              showResultMIBTree = true;\n              if (!resultMibTree || resultMibTree.length == 0 || stopResultMibTree) {\n                updateResultMibTree();\n              }\n            }}\n            size=\"xs\"\n          >\n            ",
    " text-xs\" style=\"color:",
    " {\n        if (counter) {\n          showFilterCounter = true;\n        } else {\n          showFilter = true;\n        }}\n        }\n      size=\"xs\"\n    >\n      ",
    " {\n        if (counter) {\n          showFilterCounter = true;\n        } else {\n          showFilter = true;\n        }\n      }}\n      size=\"xs\"\n    >\n      ",
    " {\n          page = \"netflow\";\n        }}\n      >\n        ",
    " {\n          page = \"sflow\";\n        }}\n      >\n        ",
    "<table id=\"sFlowTable\" class=\"display compact\" style=\"width:99%\" />",
    "<table id=\"sFlowTable\" class=\"display compact wrap\" style=\"width:99%\" />",
    "Data",
    " {\n          showFilterCounter = false;\n        }}\n        size=\"xs\"\n      >\n        ",
    " {\n          showFilterCounter = false;\n          refresh();\n        }}\n        size=\"xs\"\n      >\n        ",
    "Reason",
    " {\n          if(counter) {\n            showCounterReport = true\n          } else {\n            showReport = true;\n          }\n        }}\n        size=\"xs\"\n      >\n        ",
    " {\n          showIFCounter(\"pps\");\n        }}\n      >\n        ",
    " {\n          showCpuCounter();\n        }}\n      >\n        ",
    " {\n          showMemCounter();\n        }}\n      >\n        ",
    " {\n          showDiskCounter();\n        }}\n      >\n        ",
    " {\n          showNetCounter();\n        }}\n      >\n        ",
    " {\n          showIFCounter(\"bps\");\n        }}\n      >\n        ",
    "Src",
    "\n          Memory\n        ",
    "\n          Disk\n        ",
    "\n          Network\n        ",
    "Memory",
    "Network",
    "\n      Counter Sample\n    ",
    "\n          I/F BPS\n        ",
    "\n          I/F PPS\n        ",
    " {\n          selectedNetwork = \"\";\n          showEditNetwork = true;\n          showMapMenu = false;\n        }}\n      >\n        ",
    " {\n          selectedNetwork = \"\";\n          showEditNetwork = true;\n          showMapMenu = false;\n        }}\n      >\n        ",
    " {\n          showNetworkMenu = false;\n          showEditNetwork = true;\n        }}\n      >\n        ",
    " {\n          showNetworkMenu = false;\n          showNetworkLines = true;\n        }}\n      >\n        ",
    " {\n          showNetworkMenu = false;\n          showNeighborNetworksAndLines = true;\n        }}\n      >\n        ",
    " {\n          deleteNetwork(selectedNetwork);\n          refreshMap();\n        }}\n      >\n        ",
    " {\n    networkTemplate = undefined;\n    refreshMap();\n  }}\n/>\n\n",
    " {\n    refreshMap();\n  }}\n  on:editLine={(e) => {\n    selectedLineID = e.detail;\n    selectedLineNode1= \"\";\n    selectedLineNode2= \"\";\n    showEditLine = true;\n  }}\n/>\n\n",
    " {\n    refreshMap();\n  }}\n  on:addNetwork={(e) => {\n    networkTemplate = e.detail;\n    showEditNetwork = true;\n  }}\n/>\n\n",
    "Not LLDP",
    "\n        {/if}\n        {#if id ",
    "& !template}\n          ",
    " {\n          showEditPort = false;\n        }}\n        size=\"xs\"\n      >\n        ",
    "Auto",
    "2894x4093 A4P",
    "4093x2894 A4L",
    " {\n            chart = undefined;\n            showSelectEnt = \"\";\n            showResultTable();\n          }}\n        >\n          ",
    " {\n            chart = undefined;\n            selectedTab = \"\";\n            showResultTable();\n          }}\n        >\n          ",
    "\n        {/if}\n        {#if selectedTab == \"log\" ",
    " exportLogs(\"csv\")}\n            size=\"xs\"\n          >\n            ",
    " exportLogs(\"excel\")}\n            size=\"xs\"\n          >\n            ",
    " exportLogs(\"excel\")}\n            size=\"xs\"\n          >\n            ",
    "& logs.length > 0 }\n          ",
    " {\n        BrowserOpenURL(\n          `https://lhx98.linkclub.jp/twise.co.jp/#sec06`\n        );\n      }}\n    >\n      ",
    " {\n            const ports = [];\n            for(const p of network.Ports) {\n              ports.push({\n                Name: p.Name,\n                X: p.X,\n                Y: p.Y,\n                Polling: p.Polling,\n              })\n            }\n            ExportPortDef(JSON.stringify(ports,null,\"  \"));\n          }}\n          size=\"xs\"\n        >\n          ",
    " {\n            const d = await ImportPortDef();\n            if (!d) {\n              return;\n            }\n            const ports = JSON.parse(d);\n            if(!ports) {\n              return;\n            }\n            for(let i = 0; i ",
    " {\n            const d = await ImportPortDef();\n            if (!d) {\n              return;\n            }\n            const ports = JSON.parse(d);\n            if(!ports) {\n              return;\n            }\n            for(let i = 0; i ",
    "< network.Ports.length) {\n                network.Ports[i].Name = ports[i].Name || \"\";\n                network.Ports[i].X = ports[i].X || 0;\n                network.Ports[i].Y = ports[i].Y || 0;\n                if (ports[i].Polling) {\n                  network.Ports[i].Polling = ports[i].Polling;\n                }\n              }\n            }\n            showTable();\n          }}\n          size=\"xs\"\n        >\n          ",
    "< ports.length;i ++) {\n              if (i ",
    " {\n              showResultMIBTree = true;\n              if (\n                !resultMibTree ||\n                resultMibTree.length == 0 ||\n                stopResultMibTree\n              ) {\n                updateResultMibTree();\n              }\n            }}\n            size=\"xs\"\n          >\n            ",
    " {\n            stopResultMibTree = true;\n          }}\n          size=\"xs\"\n        >\n          ",
    " {\n            name = e.detail;\n            showResultMIBTree = false;\n            get();\n          }}\n        />\n      ",
    " {\n            showResultMIBTree = false;\n          }}\n          size=\"xs\"\n        >\n          ",
    " (showMissing = false)}\n        size=\"xs\"\n      >\n        ",
    " (showMissing = false)}\n        size=\"xs\"\n      >\n        ",
    "TWSNMP gMMI(",
    "gNMI get ",
    "value == '",
    " {\n          path = selected;\n        }}\n      />\n    ",
    "\n          Capabilities\n        ",
    "{\n            BrowserOpenURL(\"https://github.com/YangModels/yang\");\n          }}\n          size=\"xs\"\n        >\n          ",
    "gNMI Version:{ capData.Version }",
    "Encodings:{ capData.Encodings }",
    " {\n          showCap = false;\n        }}\n        size=\"xs\"\n      >\n        ",
    " {\n          showNodeMenu = false;\n          showGNMITool = true;\n        }}\n      >\n        ",
    " {\n          showNetworkMenu = false;\n          CheckNetwork(selectedNetwork);\n          refreshMap();\n        }}\n      >\n        ",
    " {\n          showNetworkMenu = false;\n          selectedNode = \"NET:\" + selectedNetwork;\n          showPing = true;\n        }}\n      >\n        ",
    " {\n          showNetworkMenu = false;\n          selectedNode = \"NET:\" + selectedNetwork;\n          showMibBr = true;\n        }}\n      >\n        ",
    " {\n    showMapMenu = false;\n    showNetworkMenu = false;\n    showNodeMenu = false;\n    showDrawItemMenu = false;\n    showFormatNodesMenu = false;\n  }}\n/>\n",
    "\nvar value = JSON.parse(data);\nvalue == \"${d[0].Value}\";",
    "Encoding",
    " {\n    setMapReadOnly(false);\n    refreshMap();\n  }}\n/>\n\n",
    " {\n          selectedNode = \"\";\n          showEditNode = true;\n          showMapMenu = false;\n          setMapReadOnly(true);\n        }}\n      >\n        ",
    " {\n          selectedDrawItem = \"\";\n          showEditDrawItem = true;\n          showMapMenu = false;\n          setMapReadOnly(true);\n        }}\n      >\n        ",
    " {\n          selectedNetwork = \"\";\n          showEditNetwork = true;\n          showMapMenu = false;\n          setMapReadOnly(true);\n        }}\n      >\n        ",
    " {\n    setMapReadOnly(false);\n  }}\n/>\n\n",
    " {\n    setMapReadOnly(false);\n  }}\n/>\n\n",
    " {\n    setMapReadOnly(false);\n    refreshMap();\n  }}\n  on:addNetwork={(e) => {\n    networkTemplate = e.detail;\n    showEditNetwork = true;\n    setMapReadOnly(true);\n  }}\n/>\n\n",
    " {\n    setMapReadOnly(false);\n    refreshMap();\n  }}\n  on:addNetwork={(e) => {\n    networkTemplate = e.detail;\n    showEditNetwork = true;\n    setMapReadOnly(true);\n  }}\n/>\n\n",
    " {\n    setMapReadOnly(false);\n    refreshMap();\n  }}\n  on:editLine={(e) => {\n    selectedLineID = e.detail;\n    selectedLineNode1= \"\";\n    selectedLineNode2= \"\";\n    showEditLine = true;\n    setMapReadOnly(true);\n  }}\n/>\n\n",
    " {\n    setMapReadOnly(false);\n    refreshMap();\n  }}\n  on:editLine={(e) => {\n    selectedLineID = e.detail;\n    selectedLineNode1= \"\";\n    selectedLineNode2= \"\";\n    showEditLine = true;\n    setMapReadOnly(true);\n  }}\n/>\n\n",
    " {\n          showDrawItemMenu = false;\n          showEditDrawItem = true;\n          setMapReadOnly(true);\n        }}\n      >\n        ",
    " {\n          showNetworkMenu = false;\n          showNetworkLines = true;\n          setMapReadOnly(true);\n        }}\n      >\n        ",
    " {\n          showNodeMenu = false;\n          showEditNode = true;\n          setMapReadOnly(true);\n        }}\n      >\n        ",
    " {\n          showNodeMenu = false;\n          showEditNode = true;\n          setMapReadOnly(true);\n        }}\n      >\n        ",
    " {\n          showNetworkMenu = false;\n          selectedNode = \"NET:\" + selectedNetwork;\n          showPing = true;\n          setMapReadOnly(true);\n        }}\n      >\n        ",
    " {\n          showNetworkMenu = false;\n          showNeighborNetworksAndLines = true;\n          setMapReadOnly(true);\n        }}\n      >\n        ",
    " {\n          showNodeMenu = false;\n          showPing = true;\n          setMapReadOnly(true);\n        }}\n      >\n        ",
    " {\n          showNodeMenu = false;\n          showGNMITool = true;\n          setMapReadOnly(true);\n        }}\n      >\n        ",
    " {\n    networkTemplate = undefined;\n    setMapReadOnly(false);\n    refreshMap();\n  }}\n/>\n\n",
    " {\n          showNetworkMenu = false;\n          selectedNode = \"NET:\" + selectedNetwork;\n          showMibBr = true;\n          setMapReadOnly(true);\n        }}\n      >\n        ",
    " {\n          showNetworkMenu = false;\n          showEditNetwork = true;\n          setMapReadOnly(true);\n        }}\n      >\n        ",
    " {\n          showNodeMenu = false;\n          showMibBr = true;\n          setMapReadOnly(true);\n        }}\n      >\n        ",
    " {\n          showNodeMenu = false;\n          showMibBr = true;\n          setMapReadOnly(true);\n        }}\n      >\n        ",
    "\n    {$_(\"Discover.Stats\")} - {stats.Now - stats.StartTime}Sec\n  ",
    "\n    {$_(\"Discover.Stats\")} - {stats.Now - stats.StartTime}Sec\n  ",
    "gNMI Port",
    "gNMI Encoding",
    " {\n          showIPAM();\n        }}\n      >\n        ",
    " {\n          showIPAM();\n        }}\n      >\n        ",
    "TCP Sever",
    "& logs.length > 0}\n          ",
    " {\n    page = oldPage;\n  }}\n/>\n",
    " {\n        showMapList = true;\n      }}\n      size=\"xs\"\n    >\n      ",
    "Unknown",
    "Text",
    "Dst",
    " {\n    showMapMenu = false;\n    showNetworkMenu = false;\n    showNodeMenu = false;\n    showDrawItemMenu = false;\n    showFormatNodesMenu = false;\n    refreshCount = 0;\n  }}\n/>\n",
    " {\n          page = \"pki\";\n        }}\n      >\n        ",
    "<span class=\"mdi mdi-clock-remove text-xs\" style=\"color: #dfdf22;\"></span><span class=\"ml-2\">expired</span>",
    "<span class=\"mdi mdi-book-remove text-xs\" style=\"color: #e31a1c;\"></span><span class=\"ml-2\">valid</span>",
    "<span class=\"mdi mdi-certificate text-xs\" style=\"color: #1f78b4;\"></span><span class=\"ml-2\">valid</span>",
    "Subject",
    "Created",
    "Revoked",
    " (showCreateCSRDialog = true)}\n      size=\"xs\"\n    >\n      ",
    " (showDestroyCADialog = true)}\n        size=\"xs\"\n      >\n        ",
    "<span class=\"mdi mdi-clock-remove text-xs\" style=\"color: #dfdf22;\"></span><span class=\"ml-2\">Expired</span>",
    "<span class=\"mdi mdi-book-remove text-xs\" style=\"color: #e31a1c;\"></span><span class=\"ml-2\">Revoked</span>",
    "<span class=\"mdi mdi-certificate text-xs\" style=\"color: #1f78b4;\"></span><span class=\"ml-2\">Valid</span>",
    "<span class=\"mdi mdi-clock-remove text-xs\" style=\"color: #dfdf22;\"></span><span class=\"ml-2\">",
    "<span class=\"mdi mdi-book-remove text-xs\" style=\"color: #e31a1c;\"></span><span class=\"ml-2\">",
    "<span class=\"mdi mdi-certificate text-xs\" style=\"color: #1f78b4;\"></span><span class=\"ml-2\">",
    "SANs",
    " (showPKIControlDialog = true)}\n        size=\"xs\"\n      >\n        ",
    " {\n        showPKIControlDialog = false;\n      }}\n      size=\"xs\"\n    >\n      ",
    " {\n        showCreateCSRDialog = false;\n      }}\n      size=\"xs\"\n    >\n      ",
    " {\n    resizeLogLevelChart();\n    resizeLogCountChart();\n  }}\n/>\n\n",
    " {\n          if (counter) {\n            showCounterReport = true;\n          } else {\n            showReport = true;\n          }\n        }}\n        size=\"xs\"\n      >\n        ",
    "Location",
    "& address}\n        ",
    " {\n                BrowserOpenURL(\n                  `https://www.google.com/maps/search/?api=1",
    "\n              Google MAP\n            ",
    " {\n              BrowserOpenURL(\n                `https://www.virustotal.com/gui/ip-address/` + address\n              );\n            }}\n          >\n            ",
    "&query=` + latLong\n                );\n              }}\n            >\n              "
  ],
  "i18n-ally.extract.ignoredByFiles": {
    "frontend/src/lib/PKI.svelte": [
      "Expire"
    ]
  }
}